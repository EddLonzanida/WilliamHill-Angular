<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<# 
    const string GET_SET = "{ get; set; }";

    var templateName = Path.GetFileName(Host.TemplateFile);
    var templateNameWithoutExtension = Path.GetFileNameWithoutExtension(Host.TemplateFile);
    var hostServiceProvider = (IServiceProvider)Host;
    var dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
    var templateFileItem = dte.Solution.FindProjectItem(Host.TemplateFile);
    var dteProject = (EnvDTE.Project)templateFileItem.ContainingProject; 
    var defaultNamespace = dteProject.Properties.Item("DefaultNamespace").Value;
    var templateDir = Path.GetDirectoryName(Host.TemplateFile);
    var fullPath = dteProject.Properties.Item("FullPath").Value.ToString();

    string PROJECT_NAME_THAT_CONTAINS_ENTITY = defaultNamespace.ToString().Replace(".Data",".Business.Common");
    
    fullPath = fullPath.EndsWith("\\") ? fullPath.Substring(0, fullPath.Length-1) : fullPath;
    
    var subNamespace = templateDir.Replace(fullPath, string.Empty).Replace("\\", ".");
    var fileNamespace = string.Concat(defaultNamespace, subNamespace);
 #>
//------------------------------------------------------------------------------
// <auto-generated>
//  Last update:  <#= DateTime.Now.ToString("f") #>
//  T4 template:  <#= templateName #>
//  How to trigger: Goto Properties -> Custom Tool -> rename from TextTemplatingFileGeneratorr to TextTemplatingFileGenerator
//  How to disable: Rename from TextTemplatingFileGenerator back to TextTemplatingFileGeneratorr
// </auto-generated>
//------------------------------------------------------------------------------
using <#= PROJECT_NAME_THAT_CONTAINS_ENTITY #>.Entities;
using System.Data.Entity;

namespace <#= fileNamespace #>
{
    public class <#= templateNameWithoutExtension #> : DbContext
    {
<# 
        var entitiesToEnumerate = GetEntities((EnvDTE80.DTE2)dte, dteProject, PROJECT_NAME_THAT_CONTAINS_ENTITY); //GetEntitiesToEnumerate(assembly, $"{PROJECT_NAME_THAT_CONTAINS_ENTITY}.Entities");
        var i = 0;
        var cnt= entitiesToEnumerate.Count();
  
        entitiesToEnumerate.ForEach(r =>
        {
            i++;

            PushIndent("    ");

            var pluralized = Pluralize(r);

            WriteLine($"    public DbSet<{r}> {pluralized} {GET_SET}");

            if(i < cnt) WriteLine("");
    
            PopIndent();
        });
#>
    }
}
<#+
    public static List<Project> Projects(DTE2 dte)
    {
        Projects projects = dte.Solution.Projects;
        List<Project> list = new List<Project>();

        var item = projects.GetEnumerator();

        while (item.MoveNext())
        {
            var project = item.Current as Project;

            if (project == null)
            {
                continue;
            }

            if (project.Kind == ProjectKinds.vsProjectKindSolutionFolder)
            {
                list.AddRange(Projects(project));
            }
            else
            {
                list.Add(project);
            }
        }

        return list;
    }

    private static IEnumerable<Project> Projects( Project project)
    {
        List<Project> list = new List<Project>();

        for (var i = 1; i <= project.ProjectItems.Count; i++)
        {
            var solutionFolderProject = project.ProjectItems.Item(i).SubProject;

            if (solutionFolderProject == null)
            {
                continue;
            }

            // If this is another solution folder, do a recursive call, otherwise add
            if (solutionFolderProject.Kind == ProjectKinds.vsProjectKindSolutionFolder)
            {
                list.AddRange(Projects(solutionFolderProject));
            }
            else
            {
                list.Add(solutionFolderProject);
            }
        }

        return list;
    }

    public static Project GetProject(DTE2 dte, string projectNameEndsWith)
    {
        return Projects(dte).Where(x => x.Name.EndsWith(projectNameEndsWith)).FirstOrDefault();
    }

    public static List<string> GetEntities(DTE2 dte, Project project, string projectNameEndsWith)
    {
        var commonEntitiesProject = GetProject(dte, projectNameEndsWith);
        var entities = Classes(commonEntitiesProject, c => c.FullName.Contains(".Common.Entities") && !c.FullName.Contains(".BaseClasses"))
            .Where(c => !c.EndsWith("Base") && !c.EndsWith("Enums"))
            .ToList();

        return entities;
    }

    public static List<string> Classes(Project project, Func<CodeNamespace, bool> whereClause)
    {
        var projectItems = Classes(project)
            .Where(c => c.FileCodeModel != null)
            .Where(c => c.FileCodeModel.CodeElements.Cast<CodeElement>().OfType<CodeNamespace>().FirstOrDefault() != null)
            .Where(c => whereClause(c.FileCodeModel.CodeElements.Cast<CodeElement>().OfType<CodeNamespace>().First()))
            .Select(c => System.IO.Path.GetFileNameWithoutExtension(c.Name))
            .ToList();

        return projectItems;
    }

    public static List<ProjectItem> Classes(Project project)
    {
        var allProjectItems = AllProjectItems(project.ProjectItems);
        var projectItems = allProjectItems.Where(c => c.Name.EndsWith(".cs"));

        return projectItems.ToList();
    }
    
    public static IEnumerable<ProjectItem> AllProjectItems(ProjectItems projectItems)
    {
        foreach (ProjectItem item in projectItems)
        {
            yield return item;

            if (item.SubProject != null)
            {
                foreach (ProjectItem childItem in AllProjectItems(item.SubProject.ProjectItems))
                    yield return childItem;
            }
            else
            {
                foreach (ProjectItem childItem in AllProjectItems(item.ProjectItems))
                    yield return childItem;
            }
        }
    }

    public static string Pluralize(string text)
    {
        var newWord = text.Trim();
        var word = text.Trim();

        if (string.IsNullOrWhiteSpace(word)) return string.Empty;

        var a = word.ToCharArray();
        var lastLetter = a[a.Length - 1];
        var isLower = char.IsLower(lastLetter);
        string append = "";

        var exceptions = new Dictionary<string, string> {
                { "man", "men" },
                { "woman", "women" },
                { "child", "children" },
                { "tooth", "teeth" },
                { "foot", "feet" },
                { "mouse", "mice" },
                { "belief", "beliefs" } };

        if (exceptions.ContainsKey(word.ToLowerInvariant()))
        {
            return exceptions[word.ToLowerInvariant()];
        }

        if (word.EndsWith("y", StringComparison.OrdinalIgnoreCase) &&
            !word.EndsWith("ay", StringComparison.OrdinalIgnoreCase) &&
            !word.EndsWith("ey", StringComparison.OrdinalIgnoreCase) &&
            !word.EndsWith("iy", StringComparison.OrdinalIgnoreCase) &&
            !word.EndsWith("oy", StringComparison.OrdinalIgnoreCase) &&
            !word.EndsWith("uy", StringComparison.OrdinalIgnoreCase))
        {
            append = isLower ? "ies" : "IES";

            return newWord.Substring(0, newWord.Length - 1) + append;
        }

        if (word.EndsWith("us", StringComparison.InvariantCultureIgnoreCase)
            || word.EndsWith("ss", StringComparison.InvariantCultureIgnoreCase) 
            || word.EndsWith("x", StringComparison.InvariantCultureIgnoreCase)
            || word.EndsWith("ch", StringComparison.InvariantCultureIgnoreCase)
            || word.EndsWith("sh", StringComparison.InvariantCultureIgnoreCase))
        {
            append = isLower ? "es" : "ES";

            return newWord + append;
        }

        if (word.EndsWith("s", StringComparison.InvariantCultureIgnoreCase))
        {
            return newWord;
        }

        if (word.EndsWith("f", StringComparison.InvariantCultureIgnoreCase) && word.Length > 1)
        {
            append = isLower ? "ves" : "VES";

            return newWord.Substring(0, newWord.Length - 1) + append;
        }

        if (word.EndsWith("fe", StringComparison.InvariantCultureIgnoreCase) && word.Length > 2)
        {
            append = isLower ? "ves" : "VES";

            return newWord.Substring(0, newWord.Length - 2) + append;
        }

        append = isLower ? "s" : "S";

        return newWord + append;
    }
#>