<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="$(SolutionDir)Business\$(ProjectName)\bin\$(ConfigurationName)\Eml.Contracts.dll" #>
<#@ assembly name="$(SolutionDir)Business\$(ProjectName)\bin\$(ConfigurationName)\$(ProjectName).dll" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations.Schema" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Eml.Contracts.Attributes" #>
<#@ import namespace="TechChallenge.Business.Common.Entities" #>
<#@ import namespace="TechChallenge.Business.Common.Entities.BaseClasses" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//  Date updated:  <#= DateTime.Now.ToString("f") #>
//  Template:  <#= Path.GetFileName(Host.TemplateFile) #>
//  * Enum members are arranged from top to bottom, the same order it was declared.
//  * Or use SortOrder attribute into your property.
//  How to trigger: Goto Properties -> Custom Tool -> rename from TextTemplatingFileGeneratorr to TextTemplatingFileGenerator
//  How to disable: Rename from TextTemplatingFileGenerator back to TextTemplatingFileGeneratorr
// </auto-generated>
//------------------------------------------------------------------------------
<#= GenerateOutput() #><#+ 
    public string GenerateOutput()
    {
        var hostServiceProvider = (IServiceProvider)Host;
        var dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
        var templateFileItem = dte.Solution.FindProjectItem(Host.TemplateFile);
        var dteProject = (EnvDTE.Project)templateFileItem.ContainingProject; 
        var defaultNamespace = dteProject.Properties.Item("DefaultNamespace").Value;
        var templateDir = Path.GetDirectoryName(Host.TemplateFile);
        var fullPath = dteProject.Properties.Item("FullPath").Value.ToString();
    
        fullPath = fullPath.EndsWith("\\") ? fullPath.Substring(0, fullPath.Length-1) : fullPath;
    
        var subNamespace = templateDir.Replace(fullPath, string.Empty).Replace("\\", ".");
        var fileNamespace = string.Concat(defaultNamespace, subNamespace);

        WriteLine($"namespace {fileNamespace}");
        WriteLine("{");

        var assembly = GetTargetAssembly(); 

        var entitiesToEnumerate = GetEntitiesToEnumerate(assembly, fileNamespace);
        var i = 0;
        var cnt= entitiesToEnumerate.Count();
  
        entitiesToEnumerate.ForEach(r =>
        {
            i++;

            var propertiesToEnumerate = GetPropertiesToEnumerate(r, "Id").ConvertAll(p => $"    {p}");

            if (propertiesToEnumerate.Count > 1)
            {
                PushIndent("    ");

                var propertyEnums = string.Join($",{Environment.NewLine}", propertiesToEnumerate.ToArray());

                WriteLine($"public enum e{r.Name}");
                WriteLine("{");
                WriteLine(propertyEnums);
                WriteLine("}");

                if(i < cnt) WriteLine("");
    
                PopIndent();
            }
        });

        WriteLine("}");

        return "";
    }

    public int SortOrderValue(PropertyInfo propertyInfo)
    {
        var attribute = CustomAttributeExtensions.GetCustomAttribute(propertyInfo, typeof(SortOrderAttribute), false);

        if (attribute == null) return 999;

        var result = (SortOrderAttribute)attribute;

        return result.Value;
    }

    public bool IsNotMapped(PropertyInfo propertyInfo)
    {
        var attribute = CustomAttributeExtensions.GetCustomAttribute(propertyInfo, typeof(NotMappedAttribute), false);

        return attribute != null;
    }

    public  Assembly GetTargetAssembly()
    {
        return typeof(EntityBase).Assembly;
    }

    public static List<Type> GetEntitiesToEnumerate(Assembly assembly, string ns)
    {
        return assembly.GetTypes()
            .Where(type => type.Namespace == ns && !type.IsAbstract)
            .OrderBy(r => r.Name)
            .ToList();
    }

    public  List<string> GetPropertiesToEnumerate(Type type, string excludeEndingWith)
    {
        return type.GetProperties(BindingFlags.Public | BindingFlags.Instance)
            .Where(r => r.CanWrite 
                    && r.CanRead
                    && IsSimpleType(r.PropertyType)
                    && !IsNotMapped(r)
                    && !r.Name.EndsWith(excludeEndingWith)
                    && !r.Name.EndsWith("PhoneNumber")
                    && !r.Name.EndsWith("DateDeleted")
                    && !r.Name.EndsWith("DeletionReason")
                    && !r.Name.EndsWith("CreationDate")
                    && !r.Name.EndsWith("CreatedBy")
                    && !r.Name.EndsWith("ModificationDate")
                    && !r.Name.EndsWith("ModifiedBy")
                    && !r.Name.EndsWith("IsActive"))
            .OrderBy(r => SortOrderValue(r))
            .Select(r => r.Name)
            .ToList();
    }

    
    public static bool IsSimpleType(Type type)
    {
        return
            type.IsValueType ||
            type.IsPrimitive ||
            new Type[] {
            typeof(string),
            typeof(decimal),
            typeof(DateTime),
            typeof(DateTimeOffset),
            typeof(TimeSpan),
            typeof(Guid)
            }.Contains(type) ||
            Convert.GetTypeCode(type) != TypeCode.Object;
    }
    
    static string GetAssemblyPath(EnvDTE.Project vsProject)
    {
        string fullPath = vsProject.Properties.Item("FullPath").Value.ToString();
        string outputPath = vsProject.ConfigurationManager.ActiveConfiguration.Properties.Item("OutputPath").Value.ToString();
        string outputDir = Path.Combine(fullPath, outputPath);
        string outputFileName = vsProject.Properties.Item("OutputFileName").Value.ToString();
        string assemblyPath = Path.Combine(outputDir, outputFileName);

        return assemblyPath;
    }
#>